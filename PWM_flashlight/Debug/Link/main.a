;#define F_CPU 4800000UL
;#include <tiny13.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <io.h>
;#include <delay.h>
;#include <stdbool.h>
;#include <stdint.h>
;
;
;
;#define PB0   (1<<0)
;#define PB1   (1<<1)
;#define PB3   (1<<3)
;#define PB4   (1<<4)
;#define PB5   (1<<5)
;#define PB6   (1<<6)
;#define PB7   (1<<7)
;
;
;#define WGM     (0x03) << 0
;#define COM_A   (0x02) << 6
;#define COM_B   (0x02) << 4
;#define CS      (0x03) << 0
;
;uint8_t brightness_level_percent = 0;
;uint8_t control_buttons_status = 0; // 0 - no used; 1 - brightnes up; 2 - brightnes down; 3 - pressing two buttons
;uint8_t control_buttons_update = 0;
;
;
;void initializationDefolt(void);
;void PWM(void);
;uint8_t Check_Button(void);
;void Brightnes_Poll(void);
;
;void EEPROM_write(unsigned int uiAddress, unsigned char ucData);
;unsigned char EEPROM_read(unsigned int uiAddress);
;
;void initializationDefolt(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0027 	brightness_level_percent = EEPROM_read(0x00);
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0028      // Declare your local variables here
; 0000 0029 
; 0000 002A     // Crystal Oscillator division factor: 1
; 0000 002B     #pragma optsize-
; 0000 002C     CLKPR=(1<<CLKPCE);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002D     CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002E     #ifdef _OPTIMIZE_SIZE_
; 0000 002F     #pragma optsize+
; 0000 0030     #endif
; 0000 0031 
; 0000 0032     // Input/Output Ports initialization
; 0000 0033     // Port B initialization
; 0000 0034     // Function: Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0035     DDRB=(0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (1<<DDB0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0036     // State: Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0037     PORTB=(0<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038 
; 0000 0039     // Timer/Counter 0 initialization
; 0000 003A     // Clock source: System Clock
; 0000 003B     // Clock value: Timer 0 Stopped
; 0000 003C     // Mode: Normal top=0xFF
; 0000 003D     // OC0A output: Disconnected
; 0000 003E     // OC0B output: Disconnected
; 0000 003F     TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0040     TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0041     TCNT0=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0042     OCR0B=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0043 	if(brightness_level_percent == 0xFF)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0044 	{
; 0000 0045 		brightness_level_percent = 50;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0046 	}
; 0000 0047     OCR0A = (brightness_level_percent * 0xFF) / 100;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0048 
; 0000 0049     // Timer/Counter 0 Interrupt(s) initialization
; 0000 004A     TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004B 
; 0000 004C     // External Interrupt(s) initialization
; 0000 004D     // INT0: On
; 0000 004E     // INT0 Mode: Falling Edge
; 0000 004F     // Interrupt on any change on pins PCINT0-5: Off
; 0000 0050     GIMSK=(1<<INT0) | (0<<PCIE);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0051     MCUCR=(1<<ISC01) | (0<<ISC00);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0052     GIFR=(1<<INTF0) | (0<<PCIF);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0053 
; 0000 0054     // Analog Comparator initialization
; 0000 0055     // Analog Comparator: Off
; 0000 0056     // The Analog Comparator's positive input is
; 0000 0057     // connected to the AIN0 pin
; 0000 0058     // The Analog Comparator's negative input is
; 0000 0059     // connected to the AIN1 pin
; 0000 005A     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 005B     ADCSRB=(0<<ACME);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005C     // Digital input buffer on AIN0: On
; 0000 005D     // Digital input buffer on AIN1: On
; 0000 005E     DIDR0=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005F 
; 0000 0060     // ADC initialization
; 0000 0061     // ADC disabled
; 0000 0062     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0063 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;void main()
; 0000 0066 {
;PCODE: $00000040 VOL: 0
; 0000 0067     #asm("cli")
;PCODE: $00000041 VOL: 0
; 0000 0068     initializationDefolt();
;PCODE: $00000042 VOL: 0
; 0000 0069     #asm("sei")
;PCODE: $00000043 VOL: 0
; 0000 006A     PWM();
;PCODE: $00000044 VOL: 0
; 0000 006B     while (1)
;PCODE: $00000045 VOL: 0
; 0000 006C     {
; 0000 006D         Brightnes_Poll();
;PCODE: $00000046 VOL: 0
; 0000 006E     }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006F }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
; 0000 0072 {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0073 	while(EECR & (1<<EEPE));
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;	uiAddress -> R17,R18
;	ucData -> R16
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0074 	EEAR = uiAddress;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0075 	EEDR = ucData;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0076 	EECR |= (1<<EEMPE);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0077 	EECR |= (1<<EEPE);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0078 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;
;unsigned char EEPROM_read(unsigned int uiAddress)
; 0000 007B {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 007C 
; 0000 007D 	while(EECR & (1<<EEWE));
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;	uiAddress -> R16,R17
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007E 	EEAR = uiAddress;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007F 	EECR |= (1<<EERE);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0080 	return EEDR;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0081 }
;PCODE: $00000075 VOL: 0
;
;void Brightnes_Poll(void)
; 0000 0084 {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0085 	if(control_buttons_update)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0086 	{
; 0000 0087 		switch(control_buttons_status)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0088 		{
; 0000 0089 			case 1:
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008A 			{
; 0000 008B 				if(brightness_level_percent > 20)
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008C 				{
; 0000 008D 					brightness_level_percent -= 20;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 008E 				}
; 0000 008F 				break;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0090 			}
; 0000 0091 			case 2:
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0092 			{
; 0000 0093 				if(brightness_level_percent < 100)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0094 				{
; 0000 0095 					brightness_level_percent += 20;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0096 				}
; 0000 0097 				break;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0098 			}
; 0000 0099 			case 3:
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 009A 			{
; 0000 009B 				EEPROM_write(0x00, brightness_level_percent);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009C 				break;
;PCODE: $00000098 VOL: 0
; 0000 009D 			}
; 0000 009E 			default:
;PCODE: $00000099 VOL: 0
; 0000 009F 			{
; 0000 00A0 				control_buttons_status = 0;
;PCODE: $0000009A VOL: 0
; 0000 00A1 				return;
;PCODE: $0000009B VOL: 0
; 0000 00A2 			}
; 0000 00A3 		}
;PCODE: $0000009C VOL: 0
; 0000 00A4 		control_buttons_update = 0;
;PCODE: $0000009D VOL: 0
; 0000 00A5 		control_buttons_status = 0;
;PCODE: $0000009E VOL: 0
; 0000 00A6 
; 0000 00A7 		OCR0A = (brightness_level_percent * 0xFF) / 100;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00A8 	}
; 0000 00A9 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;void PWM(void)
; 0000 00AC {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00AD     TCCR0A = WGM | COM_A | COM_B;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AE     TCCR0B = CS;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00AF     //OCR0A = 0x10;
; 0000 00B0 	//OCR0B = 0x0A;
; 0000 00B1     return;
;PCODE: $000000B0 VOL: 0
; 0000 00B2 }
;PCODE: $000000B1 VOL: 0
;
;uint8_t Check_Button(void)
; 0000 00B5 {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00B6     if(((~PINB) & PB3) && ((~PINB) & PB4))
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00B7     {
; 0000 00B8         return 3;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00B9     }
; 0000 00BA     else
;PCODE: $000000C2 VOL: 0
; 0000 00BB     {
; 0000 00BC         if((~PINB) & PB3)
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00BD         {
; 0000 00BE             return 1;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00BF         }
; 0000 00C0         else
;PCODE: $000000C9 VOL: 0
; 0000 00C1         {
; 0000 00C2             if((~PINB) & PB4)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00C3             {
; 0000 00C4                 return 2;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00C5             }
; 0000 00C6         }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C7     }
;PCODE: $000000D2 VOL: 0
; 0000 00C8     return 0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00C9 }
;PCODE: $000000D5 VOL: 0
;
;interrupt [EXT_INT0] void exterInt0(void)
; 0000 00CC {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00CD 	control_buttons_status = Check_Button();
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00CE 
; 0000 00CF 	control_buttons_update++;
;PCODE: $000000DA VOL: 0
; 0000 00D0 }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;
