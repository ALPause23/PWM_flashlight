;#include "PWM.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include "AVR_gpio.h"
;
;
;typedef enum
;{
;	DUTY_NORMAL = 0,
;	DUTY_100_PERCENT = 1,
;	DUTY_0_PERCENT = 2
;}PWM_STATE_MACHINE;
;
;
;static uint8_t inited_flag = 0;
;uint8_t signal_polarity = 0;
;uint8_t interrupt_flag_polarity = 0;
;uint8_t width_percent = 60;
;PWM_STATE_MACHINE PWM_status_SM = DUTY_NORMAL;
;PWM_STATE_MACHINE PWM_last_status_SM = DUTY_0_PERCENT;
;
;
;void PWM_DeInit(void);
;
;void PWM_Init(void)
; 0002 0018 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0002 0019 	if(inited_flag)
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 001A 	{
; 0002 001B 		return;
;PCODE: $0000000F VOL: 0
; 0002 001C 	}
; 0002 001D 
; 0002 001E 	// Timer/Counter 0 initialization
; 0002 001F 	// Clock source: System Clock
; 0002 0020 	// Clock value: Timer 0 Stopped
; 0002 0021 	// Mode: Normal top=0xFF
; 0002 0022 	// OC0A output: Disconnected
; 0002 0023 	// OC0B output: Disconnected
; 0002 0024 	TCCR0A=(0<<COM0A1) | (1<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0025 	TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0026 	TCNT0=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0027 	OCR0B=0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 0028 	if(width_percent == 0xFF)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0029 	{
; 0002 002A 		width_percent = 60;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0002 002B 	}
; 0002 002C 	OCR0A = 74;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 002D 
; 0002 002E 	if(PWM_last_status_SM == DUTY_0_PERCENT)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 002F 	{
; 0002 0030 		signal_polarity = 0;
;PCODE: $00000024 VOL: 0
; 0002 0031 	}
; 0002 0032 	else if(PWM_last_status_SM == DUTY_100_PERCENT)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0033 	{
; 0002 0034 		signal_polarity = 1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 0035 	}
; 0002 0036 
; 0002 0037 	// Timer/Counter 0 Interrupt(s) initialization
; 0002 0038 	TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0039 
; 0002 003A 	inited_flag = 1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 003B }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void PWM_DeInit(void)
; 0002 003E {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 003F 	inited_flag = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0040 
; 0002 0041 	interrupt_flag_polarity = 0;
;PCODE: $00000038 VOL: 0
; 0002 0042 	signal_polarity = 0;
;PCODE: $00000039 VOL: 0
; 0002 0043 	TIMSK0 &= ~(1<<OCIE0A);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0044 	TCCR0A &= ~(1<<WGM01);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 0045 	TCCR0A &= ~(1<<WGM00);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 0046 	TCCR0A &= ~(1<<COM0A1);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0002 0047 	TCCR0A &= ~(1<<COM0A0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 0048 	TCNT0=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0049 }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;void PWM_StateMachine(void)
; 0002 004C {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 004D 	if(width_percent == 0)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 004E 	{
; 0002 004F 		PWM_status_SM = DUTY_0_PERCENT;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 0050 	}
; 0002 0051 	else
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0052 	{
; 0002 0053 		if(width_percent == 100)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 0054 		{
; 0002 0055 			PWM_status_SM = DUTY_100_PERCENT;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 0056 		}
; 0002 0057 		else
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 0058 		{
; 0002 0059 			PWM_status_SM = DUTY_NORMAL;
;PCODE: $0000005C VOL: 0
; 0002 005A 		}
;PCODE: $0000005D VOL: 0
; 0002 005B 	}
;PCODE: $0000005E VOL: 0
; 0002 005C 
; 0002 005D 	switch(PWM_status_SM)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 005E 	{
; 0002 005F 		case DUTY_NORMAL:
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0002 0060 		{
; 0002 0061 			PWM_Init();
;PCODE: $00000063 VOL: 0
; 0002 0062 
; 0002 0063 			if(interrupt_flag_polarity)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0002 0064 			{
; 0002 0065 				if(signal_polarity == 1)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 0066 				{
; 0002 0067 					OCR0A = (width_percent * 74) / 100;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0068 				}
; 0002 0069 				else
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 006A 				{
; 0002 006B 					OCR0A = ((100 - width_percent) * 74) / 100;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 006C 				}
;PCODE: $0000007D VOL: 0
; 0002 006D 				interrupt_flag_polarity = 0;
;PCODE: $0000007E VOL: 0
; 0002 006E 			}
; 0002 006F 
; 0002 0070 			break;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0002 0071 		}
; 0002 0072 		case DUTY_0_PERCENT:
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 0073 		{
; 0002 0074 			PWM_DeInit();
;PCODE: $00000084 VOL: 0
; 0002 0075 			PORTB &= ~GPIO_Pin_1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0076 			break;
;PCODE: $00000087 VOL: 0
; 0002 0077 		}
; 0002 0078 		case DUTY_100_PERCENT:
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 0079 		{
; 0002 007A 			PWM_DeInit();
;PCODE: $0000008B VOL: 0
; 0002 007B 			PORTB |= GPIO_Pin_1;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0002 007C 			break;
;PCODE: $0000008E VOL: 0
; 0002 007D 		}
; 0002 007E 	}
;PCODE: $0000008F VOL: 0
; 0002 007F 
; 0002 0080 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
;void PWM_PulseWidth_Add(uint8_t value)
; 0002 0083 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0002 0084 	width_percent += value;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;	value -> R16
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0002 0085 }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;
;void PWM_PulseWidth_Sub(uint8_t value)
; 0002 0088 {
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0002 0089 	width_percent -= value;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;	value -> R16
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 008A }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;
;void PWM_WidthPercent_Set(uint8_t new_value)
; 0002 008D {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0002 008E 	width_percent = new_value;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;	new_value -> R16
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 008F }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;uint8_t PWM_Get_PulseWidth(void)
; 0002 0092 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0002 0093 	return width_percent;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0002 0094 }
;PCODE: $000000B1 VOL: 0
;
;interrupt [TIM0_COMPA] void PWM_tim0_CompA(void)
; 0002 0097 {
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0002 0098 	signal_polarity ^= 0x01;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0002 0099 
; 0002 009A 	interrupt_flag_polarity = 1;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0002 009B }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;
